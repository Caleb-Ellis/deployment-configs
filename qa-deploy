#! /usr/bin/env bash

# Bash strict mode
set -euo pipefail

USAGE="Usage
===

  $ ./qa-deploy --tag IMAGE_TAG --production PRODUCTION_URL [--staging STAGING_URL]

Description
---
Deploy locally to minikube.
You must be connected to the Canonical VPN to use this script.
"

function invalid() {
    message=${1}
    echo "Error: ${message}"
    echo ""
    echo "$USAGE"
    exit 1
}

function add_secret_key() {
    if ! kubectl get secret snapcraft-io-config &> /dev/null; then
        kubectl create secret generic snapcraft-io-config --from-literal=secret_key=admin --from-literal=csrf_secret_key=admin
    fi
}

function add_docker_credentials_minikube() {
    if ! kubectl get secret registry-access &> /dev/null; then

        username=""
        password=""
        while [[ -z "${username}" || -z "${password}" ]]; do
            echo "##############"
            echo "Docker registry credentials"
            echo
            echo -n "Username: "
            read username
            echo -n "Password: "
            read -s password
            echo -e "\n##############"
        done

        kubectl create secret docker-registry registry-access --docker-server=prod-comms.docker-registry.canonical.com --docker-username="${username}" --docker-password="${password}" --docker-email=root@localhost

        kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "registry-access"}]}' --namespace default
    fi
}

function apply_configuration() {
    kubectl apply -f config.global.yaml --namespace kube-system
}

function run_minikube() {
    # Run minikube
    if ! minikube ip &> /dev/null; then
        minikube start
    fi

    minikube addons enable ingress

    kubectl config set-context minikube
}

function deploy_service() {
    service="${1}"
    tag="${2}"

    cat "services/${service}.yaml" | sed "s|[:][$][{]TAG_TO_DEPLOY[_aa-zA-Z]*[}]|:${tag}|" | sed 's|replicas: [0-9][0-9]*|replicas: 1|' | kubectl apply --filename -
}

function deploy_ingress() {
    ingress="${1}"
    # Create the ingress domains
    cat "ingresses/${ingress}.yaml" | sed '/namespace:/d' | kubectl apply --filename -
}

function run() {
    # Arguments
    while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
        key="$1"
        case $key in
            -t|--tag)
                if [ -z "${2:-}" ]; then invalid "Missing image tag. Usage: --tag XXXX"; fi
                tag_to_deploy=${2}
                shift
            ;;
            -p|--production)
                if [ -z "${2:-}" ]; then invalid "Missing production. Usage: --production XXXX"; fi
                production=${2}
                shift
            ;;
            -s|--staging)
                if [ -z "${2:-}" ]; then invalid "Missing staging. Usage: --staging XXXX"; fi
                staging=${2}
                shift
            ;;
            *) invalid "Option '${key}' not recognised." ;;
        esac
        shift
    done

    # Mandatory arguments
    if [ -z "${production:-}" ]; then invalid "No production domain specified (e.g. 'example.com')"; fi
    if [ -z "${tag_to_deploy:-}" ]; then invalid "No image tag specified (e.g. 'latest' or 'a34dca23')"; fi

    echo -n "Are you connected to the VPN? [Y/n] "
    read vpn
    if [ "${vpn}" == "n" ]; then exit 0; fi

    run_minikube
    add_secret_key

    add_docker_credentials_minikube

    deploy_service "${production}" "${tag_to_deploy}"

    deploy_ingress "production/${production}"

    if [ -n "${staging:-}" ]; then deploy_ingress "staging/${staging}"; fi
    apply_configuration
}

run ${@}
